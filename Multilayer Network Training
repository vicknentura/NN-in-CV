from keras.layers import Dense
from keras.models import Sequential
import numpy as np

def load_train(path):
    features_train = np.load('https://practicum-content.s3.us-west-1.amazonaws.com/data-eng/datasets/train_features.npy')
    target_train = np.load('https://practicum-content.s3.us-west-1.amazonaws.com/data-eng/datasets/train_target.npy')
    features_train = features_train.reshape(features_train.shape[0], 28 * 28) / 255.
    return (features_train, target_train)

def load_test(path):
    features_test = np.load('https://practicum-content.s3.us-west-1.amazonaws.com/data-eng/datasets/test_features.npy')
    target_test = np.load('https://practicum-content.s3.us-west-1.amazonaws.com/data-eng/datasets/test_target.npy')
    features_test = features_test.reshape(features_test.shape[0], 28 * 28) / 255.
    return (features_test, target_test)

def create_model(input_shape):
    model = Sequential()
    #model.add(Dense(100, input_shape=input_shape, activation='relu'))
    #model.add(Dense(100, activation='relu'))
    model.add(Dense(10, activation='softmax'))
    model.compile(optimizer='sgd', loss='sparse_categorical_crossentropy',
                  metrics=['acc'])

    return model

def train_model(model, train_data, test_data, batch_size=32, epochs=10,
                steps_per_epoch=None, validation_steps=None):
    features_train, target_train = train_data
    features_test, target_test = test_data
    model.fit(features_train, target_train,
              validation_data=(features_test, target_test),
              batch_size=batch_size, epochs=epochs,
              steps_per_epoch=steps_per_epoch,
              validation_steps=validation_steps,
              verbose=2, shuffle=True)

    return model

if __name__ == "__main__":
    train_data = load_train("/datasets/fashion_mnist/")
    test_data = load_test("/datasets/fashion_mnist/")
    model = create_model(train_data[0].shape[1:])
    model = train_model(model, train_data, test_data)
    loss, acc = model.evaluate(test_data[0], test_data[1], verbose=2)
    print("Model accuracy: {:5.2f}%".format(100 * acc))
