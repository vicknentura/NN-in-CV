from tensorflow.keras import Sequential
from tensorflow.keras.layers import Conv2D, Flatten, Dense
import numpy as np


features_train = np.load('/datasets/fashion_mnist/train_features.npy')
target_train = np.load('/datasets/fashion_mnist/train_target.npy')
features_test = np.load('/datasets/fashion_mnist/test_features.npy')
target_test = np.load('/datasets/fashion_mnist/test_target.npy')

features_train = features_train.reshape(-1, 28, 28, 1) / 255.0
features_test = features_test.reshape(-1, 28, 28, 1) / 255.0

model = Sequential()
model.add(
    Conv2D(
        filters=4,
        kernel_size=(3, 3),
        padding='same',
        activation="relu",
        input_shape=(28, 28, 1),
    )
)
model.add(
    Conv2D(
        filters=4,
        kernel_size=(3, 3),
        strides=2,
        padding='same',
        activation="relu",
    )
)
model.add(Flatten())
model.add(Dense(units=10, activation='softmax'))

model.compile(
    loss='sparse_categorical_crossentropy', optimizer='sgd', metrics=['acc']
)
model.summary()
model.fit(
    features_train,
    target_train,
    epochs=1,
    verbose=1,
    steps_per_epoch=1,
    batch_size=1,
)



from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, AveragePooling2D, Flatten, Dense

datagen = ImageDataGenerator(validation_split=0.25)

train_datagen_flow = datagen.flow_from_directory(
    '/datasets/fruits_small/',
    target_size=(150, 150),
    batch_size=16,
    class_mode='sparse',
    subset='training',
    seed=12345,
)

val_datagen_flow = datagen.flow_from_directory(
    '/datasets/fruits_small/',
    target_size=(150, 150),
    batch_size=16,
    class_mode='sparse',
    subset='validation',
    seed=12345,
)

model = Sequential()
model.add(
    Conv2D(
        filters=6,
        kernel_size=(3, 3),
        activation='relu',
        input_shape=(150, 150, 3),
    )
)
model.add(AveragePooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(units=12, activation='softmax'))

model.compile(
    loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['acc']
)

model.fit(
    train_datagen_flow,
    validation_data=val_datagen_flow,
    steps_per_epoch=1,
    validation_steps=1,
    verbose=2,
    epochs=1,
)



import warnings
warnings.filterwarnings("ignore", category=RuntimeWarning)

from tensorflow.keras.preprocessing.image import ImageDataGenerator
    
# Set up ImageDataGenerator with rescaling
datagen = ImageDataGenerator(
    validation_split=0.25,
    rescale=1./255  # Normalize pixel values to the range [0, 1]
)

# Create training data generator
train_datagen_flow = datagen.flow_from_directory(
    '/datasets/fruits_small/',
    target_size=(150, 150),
    batch_size=16,
    class_mode='sparse',
    subset='training',
    seed=12345
)

# Create validation data generator
val_datagen_flow = datagen.flow_from_directory(
    '/datasets/fruits_small/',
    target_size=(150, 150),
    batch_size=16,
    class_mode='sparse',
    subset='validation',
    seed=12345
)

# Get the first batch of training data
features, target = next(train_datagen_flow)

# Print pixel values of the first image in the batch
print(features[0])  # Print the pixel values of the first image
